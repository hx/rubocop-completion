[
  {
    "version": "0.1.0",
    "diff": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "title": "RuboCop configuration schema",
      "description": "Schema for RuboCop configuration files (e.g. .rubocop.yml), intended for helping IDEs provide autocompletion and validation.",
      "type": "object",
      "additionalProperties": false,
      "definitions": {
        "inherit_mode": {
          "type": "object",
          "minProperties": 1,
          "propertyNames": {
            "enum": [
              "merge",
              "override"
            ]
          },
          "additionalProperties": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        },
        "listOfFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "severity": {
          "type": "string",
          "enum": [
            "info",
            "refactor",
            "convention",
            "warning",
            "error",
            "fatal"
          ]
        },
        "stringOrStrings": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "attributeName": {
          "type": "string",
          "pattern": "^[A-Z][A-Za-z]*$"
        }
      },
      "properties": {
        "inherit_from": {
          "type": "string"
        },
        "inherit_gem": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/stringOrStrings"
          }
        },
        "require": {
          "$ref": "#/definitions/stringOrStrings"
        },
        "inherit_mode": {
          "$ref": "#/definitions/inherit_mode"
        },
        "UnitSpecNaming": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforceDescribeStatement": {
              "type": "boolean",
              "description": "Default: true"
            },
            "EnforceFilenames": {
              "type": "boolean",
              "description": "Default: true"
            }
          },
          "description": "Check that RSpec unit tests conform to a naming scheme."
        }
      }
    }
  },
  {
    "version": "0.17.0",
    "diff": {
    }
  },
  {
    "version": "0.18.0",
    "diff": {
    }
  },
  {
    "version": "0.18.1",
    "diff": {
    }
  },
  {
    "version": "1.0.rc1",
    "diff": {
      "properties": {
        "UnitSpecNaming": null,
        "RSpecDescribeClass": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that the first argument to the top level describe is the tested class or module."
        },
        "RSpecDescribedClass": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Use `described_class` for tested class / module"
        },
        "RSpecDescribeMethod": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that the second argument to top level describe is the tested method name."
        },
        "RSpecExampleWording": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Do not use should when describing your tests."
        },
        "RSpecMultipleDescribes": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for multiple top level describes."
        },
        "RSpecInstanceVariable": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for the usage of instance variables."
        },
        "RSpecFileName": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks the file and folder naming of the spec file."
        }
      }
    }
  },
  {
    "version": "1.0.rc2",
    "diff": {
    }
  },
  {
    "version": "1.0.rc3",
    "diff": {
      "properties": {
        "RSpecDescribeClass": null,
        "RSpecDescribedClass": null,
        "RSpecDescribeMethod": null,
        "RSpecExampleWording": null,
        "RSpecMultipleDescribes": null,
        "RSpecInstanceVariable": null,
        "RSpecFileName": null,
        "RSpec/DescribeClass": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that the first argument to the top level describe is the tested class or module."
        },
        "RSpec/DescribedClass": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Use `described_class` for tested class / module"
        },
        "RSpec/DescribeMethod": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that the second argument to top level describe is the tested method name."
        },
        "RSpec/ExampleWording": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Do not use should when describing your tests."
        },
        "RSpec/MultipleDescribes": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for multiple top level describes."
        },
        "RSpec/InstanceVariable": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for the usage of instance variables."
        },
        "RSpec/FileName": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "CustomTransform": {
              "description": "Default: {\"RuboCop\"=>\"rubocop\"}"
            }
          },
          "description": "Checks the file and folder naming of the spec file."
        }
      }
    }
  },
  {
    "version": "1.0",
    "diff": {
      "properties": {
        "RSpec/FileName": {
          "properties": {
            "CustomTransform": {
              "description": "Default: {\"RuboCop\"=>\"rubocop\", \"RSpec\"=>\"rspec\"}"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.0.1",
    "diff": {
    }
  },
  {
    "version": "1.1.0",
    "diff": {
    }
  },
  {
    "version": "1.2.0",
    "diff": {
      "properties": {
        "RSpec/FileName": null,
        "RSpec/ExampleWording": {
          "properties": {
            "CustomTransform": {
              "description": "Default: {\"be\"=>\"is\", \"have\"=>\"has\", \"not\"=>\"does not\"}"
            },
            "IgnoredWords": {
              "type": "array",
              "description": "Default: "
            }
          }
        },
        "RSpec/FilePath": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "CustomTransform": {
              "description": "Default: {\"RuboCop\"=>\"rubocop\", \"RSpec\"=>\"rspec\"}"
            }
          },
          "description": "Checks the file and folder naming of the spec file."
        }
      }
    }
  },
  {
    "version": "1.2.1",
    "diff": {
      "properties": {
        "RSpec/VerifiedDoubles": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Prefer using verifying doubles over normal doubles."
        }
      }
    }
  },
  {
    "version": "1.2.2",
    "diff": {
    }
  },
  {
    "version": "1.3.0",
    "diff": {
    }
  },
  {
    "version": "1.3.1",
    "diff": {
    }
  },
  {
    "version": "1.4.0",
    "diff": {
      "properties": {
        "RSpec/AnyInstance": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that instances are not being stubbed globally"
        },
        "RSpec/NotToNot": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AcceptedMethod": {
              "type": "string",
              "description": "Default: not_to"
            }
          },
          "description": "Enforces the usage of the same method on all negative message expectations."
        }
      }
    }
  },
  {
    "version": "1.4.1",
    "diff": {
    }
  },
  {
    "version": "1.5.0",
    "diff": {
      "properties": {
        "RSpec/VerifiedDoubles": {
          "properties": {
            "Enabled": {
              "description": "Default: true"
            }
          }
        },
        "RSpec/NotToNot": {
          "properties": {
            "AcceptedMethod": null,
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: not_to"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: not_to, to_not"
            }
          }
        },
        "RSpec/Focus": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if there are focused specs."
        },
        "RSpec/ExampleLength": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "Max": {
              "type": "integer",
              "description": "Default: 5"
            }
          },
          "description": "Checks for long example"
        }
      }
    }
  },
  {
    "version": "1.5.1",
    "diff": {
      "properties": {
        "RSpec/VerifiedDoubles": {
          "properties": {
            "IgnoreSymbolicNames": {
              "type": "boolean",
              "description": "Default: false"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.5.2",
    "diff": {
    }
  },
  {
    "version": "1.5.3",
    "diff": {
      "properties": {
        "RSpec/NamedSubject": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Name your RSpec subject if you reference it explicitly"
        }
      }
    }
  },
  {
    "version": "1.6.0",
    "diff": {
      "properties": {
        "RSpec/DescribedClass": {
          "properties": {
            "SkipBlocks": {
              "type": "boolean",
              "description": "Default: false"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.7.0",
    "diff": {
      "properties": {
        "RSpec/AnyInstance": {
          "description": "Check that instances are not being stubbed globally."
        },
        "RSpec/BeEql": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for expectations where `be(...)` can replace `eql(...)`."
        },
        "RSpec/HookArgument": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: implicit"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: implicit, each, example"
            }
          },
          "description": "Checks the arguments passed to `before`, `around`, and `after`."
        },
        "RSpec/DescribeClass": {
          "description": "Check that the first argument to the top level describe is a constant."
        },
        "RSpec/DescribedClass": {
          "description": "Checks that tests use `described_class`."
        },
        "RSpec/DescribeMethod": {
          "description": "Checks that the second argument to `describe` specifies a method."
        },
        "RSpec/ExampleWording": {
          "description": "Checks that example descriptions do not start with \"should\"."
        },
        "RSpec/EmptyExampleGroup": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "CustomIncludeMethods": {
              "type": "array",
              "description": "Default: "
            }
          },
          "description": "Checks if an example group does not include any tests."
        },
        "RSpec/ExpectActual": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for `expect(...)` calls containing literal values."
        },
        "RSpec/MessageChain": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that chains of messages are not being stubbed."
        },
        "RSpec/MultipleExpectations": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "Max": {
              "type": "integer",
              "description": "Default: 1"
            }
          },
          "description": "Checks if examples contain too many `expect` calls."
        },
        "RSpec/NestedGroups": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "MaxNesting": {
              "type": "integer",
              "description": "Default: 2"
            }
          },
          "description": "Checks for nested example groups."
        },
        "RSpec/InstanceVariable": {
          "properties": {
            "AssignmentOnly": {
              "type": "boolean",
              "description": "Default: false"
            }
          },
          "description": "Checks for instance variable usage in specs."
        },
        "RSpec/LetSetup": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks unreferenced `let!` calls being used for test setup."
        },
        "RSpec/LeadingSubject": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for `subject` definitions that come after `let` definitions."
        },
        "RSpec/FilePath": {
          "description": "Checks that spec file paths are consistent with the test subject."
        },
        "RSpec/NotToNot": {
          "description": "Checks for consistent method usage for negating expectations."
        },
        "RSpec/Focus": {
          "description": "Checks if examples are focused."
        },
        "RSpec/ExampleLength": {
          "description": "Checks for long examples."
        },
        "RSpec/MessageExpectation": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: allow"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: allow, expect"
            }
          },
          "description": "Checks for consistent message expectation style."
        },
        "RSpec/NamedSubject": {
          "description": "Checks for explicitly referenced test subjects."
        },
        "RSpec/SubjectStub": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for stubbed test subjects."
        }
      }
    }
  },
  {
    "version": "1.8.0",
    "diff": {
      "properties": {
        "RSpec/FilePath": {
          "properties": {
            "IgnoreMethods": {
              "type": "boolean",
              "description": "Default: false"
            }
          }
        },
        "RSpec/ImplicitExpect": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: is_expected"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: is_expected, should"
            }
          },
          "description": "Check that a consistent implicit expectation style is used."
        },
        "RSpec/MessageExpectation": {
          "properties": {
            "Enabled": {
              "description": "Default: false"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.9.0",
    "diff": {
      "properties": {
        "RSpec/MessageSpies": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: have_received"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: have_received, receive"
            }
          },
          "description": "Checks that message expectations are set using spies."
        },
        "RSpec/RepeatedDescription": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for repeated description strings in example groups."
        },
        "RSpec/SingleArgumentMessageChain": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that chains of messages contain more than one element."
        }
      }
    }
  },
  {
    "version": "1.9.1",
    "diff": {
      "properties": {
        "RSpec/NestedGroups": {
          "properties": {
            "MaxNesting": {
              "description": "Default: 3"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.10.0",
    "diff": {
      "properties": {
        "RSpec/ExpectOutput": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for opportunities to use `expect { ... }.to output`."
        },
        "RSpec/NestedGroups": {
          "properties": {
            "MaxNesting": null,
            "Max": {
              "type": "integer",
              "description": "Default: 3"
            }
          }
        },
        "RSpec/RepeatedExample": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for repeated examples within example groups."
        },
        "RSpec/ScatteredSetup": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for setup scattered across multiple hooks in an example group."
        }
      }
    }
  },
  {
    "version": "1.11.0",
    "diff": {
      "properties": {
        "RSpec/AroundBlock": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that around blocks actually run the test."
        },
        "RSpec/DescribedClass": {
          "properties": {
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: described_class"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: described_class, explicit"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.12.0",
    "diff": {
      "properties": {
        "RSpec/BeforeAfterAll": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles",
              "description": "Default: spec/spec_helper.rb, spec/rails_helper.rb, spec/support/**/*.rb"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that before/after(:all) isn't being used."
        },
        "RSpec/InstanceSpy": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for `instance_double` used with `have_received`."
        }
      }
    }
  },
  {
    "version": "1.13.0",
    "diff": {
      "properties": {
        "RSpec/ExampleWording": {
          "description": "Checks for common mistakes in example descriptions."
        },
        "RSpec/ExpectActual": {
          "properties": {
            "Exclude": {
              "description": "Default: spec/routing/**/*"
            }
          }
        },
        "RSpec/ItBehavesLike": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: it_behaves_like"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: it_behaves_like, it_should_behave_like"
            }
          },
          "description": "Checks that only one `it_behaves_like` style is used."
        },
        "RSpec/SharedContext": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for proper shared_context and shared_examples usage."
        }
      }
    }
  },
  {
    "version": "1.14.0",
    "diff": {
      "properties": {
        "RSpec/IteratedExpectation": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that `all` matcher is used instead of iterating over an array."
        },
        "RSpec/EmptyLineAfterFinalLet": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if there is an empty line after the last let block."
        },
        "RSpec/EmptyLineAfterSubject": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if there is an empty line after subject block."
        },
        "RSpec/OverwritingSetup": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if there is a let/subject that overwrites an existing one."
        },
        "RSpec/ScatteredLet": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for let scattered across the example group."
        }
      }
    }
  },
  {
    "version": "1.15.0",
    "diff": {
      "properties": {
        "RSpec/DescribeSymbol": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Avoid describing symbols."
        }
      }
    }
  },
  {
    "version": "1.15.1",
    "diff": {
      "properties": {
        "RSpec/ExampleWording": {
          "properties": {
            "CustomTransform": {
              "description": "Default: {\"be\"=>\"is\", \"BE\"=>\"IS\", \"have\"=>\"has\", \"HAVE\"=>\"HAS\"}"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.16.0",
    "diff": {
      "properties": {
        "RSpec/AlignLeftLetBrace": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that left braces for adjacent single line lets are aligned."
        },
        "RSpec/AlignRightLetBrace": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that right braces for adjacent single line lets are aligned."
        },
        "RSpec/ExpectInHook": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Do not use `expect` in hooks such as `before`."
        },
        "RSpec/InvalidPredicateMatcher": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks invalid usage for predicate matcher."
        },
        "RSpec/LetBeforeExamples": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for `let` definitions that come after an example."
        },
        "RSpec/MultipleSubjects": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if an example group defines `subject` multiple times."
        },
        "RSpec/ReturnFromStub": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: and_return"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: and_return, block"
            }
          },
          "description": "Checks for consistent style of stub's return setting."
        },
        "RSpec/PredicateMatcher": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "Strict": {
              "type": "boolean",
              "description": "Default: true"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: inflected"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: inflected, explicit"
            }
          },
          "description": "Prefer using predicate matcher over using predicate method directly."
        },
        "RSpec/VoidExpect": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "This cop checks void `expect()`."
        },
        "FactoryGirl/DynamicAttributeDefinedStatically": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Prefer declaring dynamic attribute values in a block."
        }
      }
    }
  },
  {
    "version": "1.17.0",
    "diff": {
      "properties": {
        "Capybara/FeatureMethods": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for consistent method usage in feature specs."
        }
      }
    }
  },
  {
    "version": "1.17.1",
    "diff": {
    }
  },
  {
    "version": "1.18.0",
    "diff": {
      "properties": {
        "Capybara/CurrentPathExpectation": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that no expectations are set on Capybara's `current_path`."
        }
      }
    }
  },
  {
    "version": "1.19.0",
    "diff": {
    }
  },
  {
    "version": "1.20.0",
    "diff": {
      "properties": {
        "FactoryGirl/DynamicAttributeDefinedStatically": null,
        "RSpec/ContextWording": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "Prefixes": {
              "type": "array",
              "description": "Default: when, with"
            }
          },
          "description": "`context` block descriptions should start with 'when', or 'with'."
        },
        "FactoryBot/DynamicAttributeDefinedStatically": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Prefer declaring dynamic attribute values in a block."
        }
      }
    }
  },
  {
    "version": "1.20.1",
    "diff": {
      "properties": {
        "RSpec/ContextWording": {
          "properties": {
            "Prefixes": {
              "description": "Default: when, with, without"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.21.0",
    "diff": {
      "properties": {
        "RSpec/MultipleExpectations": {
          "properties": {
            "AggregateFailuresByDefault": {
              "type": "boolean",
              "description": "Default: false"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.22.0",
    "diff": {
      "properties": {
        "RSpec/ExampleWithoutDescription": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: always_allow"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: always_allow, single_line_only, disallow"
            }
          },
          "description": "Checks for examples without a description."
        },
        "RSpec/ExpectChange": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: method_call"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: method_call, block"
            }
          },
          "description": "Checks for consistent style of change matcher."
        }
      }
    }
  },
  {
    "version": "1.22.1",
    "diff": {
    }
  },
  {
    "version": "1.22.2",
    "diff": {
    }
  },
  {
    "version": "1.23.0",
    "diff": {
      "properties": {
        "FactoryBot/StaticAttributeDefinedDynamically": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Prefer declaring static attribute values without a block."
        },
        "Rails/HttpStatus": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: symbolic"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: numeric, symbolic"
            }
          },
          "description": "Enforces use of symbolic or numeric value to describe HTTP status."
        }
      }
    }
  },
  {
    "version": "1.24.0",
    "diff": {
    }
  },
  {
    "version": "1.25.0",
    "diff": {
      "properties": {
        "RSpec/Be": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for expectations where `be` is used without argument."
        },
        "RSpec/Pending": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for any pending or skipped examples."
        },
        "RSpec/SharedExamples": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Enforces use of string to titleize shared examples."
        },
        "Capybara/FeatureMethods": {
          "properties": {
            "EnabledMethods": {
              "type": "array",
              "description": "Default: "
            }
          }
        },
        "FactoryBot/CreateList": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: create_list"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: create_list, n_times"
            }
          },
          "description": "Checks for create_list usage."
        }
      }
    }
  },
  {
    "version": "1.25.1",
    "diff": {
    }
  },
  {
    "version": "1.26.0",
    "diff": {
      "properties": {
        "RSpec/ReceiveCounts": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for `once` and `twice` receive counts matchers usage."
        }
      }
    }
  },
  {
    "version": "1.27.0",
    "diff": {
      "properties": {
        "RSpec/EmptyLineAfterExampleGroup": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if there is an empty line after example group blocks."
        },
        "RSpec/EmptyLineAfterHook": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks if there is an empty line after hook blocks."
        },
        "RSpec/LeadingSubject": {
          "description": "Enforce that subject is the first definition in the test."
        }
      }
    }
  },
  {
    "version": "1.28.0",
    "diff": {
      "properties": {
        "FactoryBot/DynamicAttributeDefinedStatically": null,
        "FactoryBot/StaticAttributeDefinedDynamically": null,
        "RSpec/MissingExampleGroupArgument": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that the first argument to an example group is not empty."
        },
        "RSpec/ReceiveNever": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Prefer `not_to receive(...)` over `receive(...).never`."
        },
        "FactoryBot/AttributeDefinedStatically": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Always declare attribute values as blocks."
        }
      }
    }
  },
  {
    "version": "1.29.0",
    "diff": {
      "properties": {
        "RSpec/HooksBeforeExamples": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for before/around/after hooks that come after an example."
        },
        "RSpec/ImplicitSubject": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "type": "string",
              "description": "Default: single_line_only"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: single_line_only, disallow"
            }
          },
          "description": "Checks for usage of implicit subject (`is_expected` / `should`)."
        }
      }
    }
  },
  {
    "version": "1.29.1",
    "diff": {
    }
  },
  {
    "version": "1.30.0",
    "diff": {
      "properties": {
        "RSpec/ImplicitSubject": {
          "properties": {
            "SupportedStyles": {
              "description": "Default: single_line_only, single_statement_only, disallow"
            }
          }
        },
        "RSpec/UnspecifiedException": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for a specified error in checking raised errors."
        },
        "RSpec/VerifiedDoubles": {
          "properties": {
            "IgnoreNameless": {
              "type": "boolean",
              "description": "Default: true"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.30.1",
    "diff": {
    }
  },
  {
    "version": "1.31.0",
    "diff": {
      "properties": {
        "RSpec/NamedSubject": {
          "properties": {
            "IgnoreSharedExamples": {
              "type": "boolean",
              "description": "Default: true"
            }
          }
        }
      }
    }
  },
  {
    "version": "1.32.0",
    "diff": {
      "properties": {
        "RSpec/Yield": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "This cop checks for calling a block within a stub."
        }
      }
    }
  },
  {
    "version": "1.33.0",
    "diff": {
      "properties": {
        "RSpec/Dialect": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "PreferredMethods": {
              "description": "Default: {}"
            }
          },
          "description": "This cop enforces custom RSpec dialects."
        }
      }
    }
  },
  {
    "version": "1.34.0",
    "diff": {
      "properties": {
        "RSpec/ContextWording": {
          "description": "Checks that `context` docstring starts with an allowed prefix."
        },
        "RSpec/LeakyConstantDeclaration": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that no class, module, or constant is declared."
        }
      }
    }
  },
  {
    "version": "1.34.1",
    "diff": {
    }
  },
  {
    "version": "1.35.0",
    "diff": {
      "properties": {
        "RSpec/ImplicitBlockExpectation": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check that implicit block expectation syntax is not used."
        }
      }
    }
  },
  {
    "version": "1.36.0",
    "diff": {
      "properties": {
        "RSpec/ContextMethod": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "`context` should not be used for specifying methods."
        },
        "RSpec/EmptyLineAfterExample": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AllowConsecutiveOneLiners": {
              "type": "boolean",
              "description": "Default: true"
            }
          },
          "description": "Checks if there is an empty line after example blocks."
        }
      }
    }
  },
  {
    "version": "1.37.0",
    "diff": {
      "properties": {
        "RSpec/DescribedClassModuleWrapping": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: false"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Avoid opening modules and defining specs within them."
        },
        "RSpec/PredicateMatcher": {
          "properties": {
            "AllowedExplicitMatchers": {
              "type": "array",
              "description": "Default: "
            }
          }
        },
        "FactoryBot/FactoryClassName": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Use string value when setting the class attribute explicitly."
        }
      }
    }
  },
  {
    "version": "1.37.1",
    "diff": {
    }
  },
  {
    "version": "1.38.0",
    "diff": {
      "properties": {
        "RSpec/RepeatedExampleGroupBody": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for repeated describe and context block body."
        },
        "RSpec/RepeatedExampleGroupDescription": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for repeated example group descriptions."
        }
      }
    }
  },
  {
    "version": "1.38.1",
    "diff": {
    }
  },
  {
    "version": "1.39.0",
    "diff": {
      "properties": {
        "RSpec/EmptyHook": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for empty before and after hooks."
        },
        "RSpec/MultipleExpectations": {
          "properties": {
            "AggregateFailuresByDefault": null
          }
        },
        "Capybara/VisibilityMatcher": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for boolean visibility in capybara finders."
        }
      }
    }
  },
  {
    "version": "1.40.0",
    "diff": {
      "properties": {
        "Capybara": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'Capybara' department (rspec extension)"
        },
        "Capybara/CurrentPathExpectation": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Checks that no expectations are set on Capybara's `current_path`.\n\nThe `have_current_path` matcher (https://www.rubydoc.info/github/ teamcapybara/capybara/master/Capybara/RSpecMatchers#have_current_path- instance_method) should be used on `page` to set expectations on Capybara's current path, since it uses Capybara's waiting functionality (https://github.com/teamcapybara/capybara/blob/master/ README.md#asynchronous-javascript-ajax-and-friends) which ensures that preceding actions (like `click_link`) have completed."
        },
        "Capybara/FeatureMethods": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnabledMethods": {
              "description": "Default: []"
            }
          },
          "description": "Checks for consistent method usage in feature specs.\n\nBy default, the cop disables all Capybara-specific methods that have the same native RSpec method (e.g. are just aliases). Some teams however may prefer using some of the Capybara methods (like `feature`) to make it obvious that the test uses Capybara, while still disable the rest of the methods, like `given` (alias for `let`), `background` (alias for `before`), etc. You can configure which of the methods to be enabled by using the EnabledMethods configuration option."
        },
        "Capybara/VisibilityMatcher": {
          "properties": {
            "VersionAdded": {
              "type": "string",
              "description": "Default: 1.39"
            }
          },
          "description": "Checks for boolean visibility in capybara finders.\n\nCapybara lets you find elements that match a certain visibility using the `:visible` option. `:visible` accepts both boolean and symbols as values, however using booleans can have unwanted effects. `visible: false` does not find just invisible elements, but both visible and invisible elements. For expressiveness and clarity, use one of the symbol values, `:all`, `:hidden` or `:visible`. (https://www.rubydoc.info/gems/capybara/Capybara%2FNode%2FFinders:all)"
        },
        "FactoryBot": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'FactoryBot' department (rspec extension)"
        },
        "FactoryBot/AttributeDefinedStatically": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "FactoryBot/CreateList": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "create_list",
                "n_times"
              ]
            }
          },
          "description": "Checks for create_list usage.\n\nThis cop can be configured using the `EnforcedStyle` option"
        },
        "FactoryBot/FactoryClassName": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Use string value when setting the class attribute explicitly.\n\nThis cop would promote faster tests by lazy-loading of application files. Also, this could help you suppress potential bugs in combination with external libraries by avoiding a preload of application files from the factory files."
        },
        "RSpec": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'RSpec' department (rspec extension)"
        },
        "RSpec/AlignLeftLetBrace": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/AlignRightLetBrace": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/AnyInstance": {
          "description": "Check that instances are not being stubbed globally.\n\nPrefer instance doubles over stubbing any instance of a class"
        },
        "RSpec/Be": {
          "description": "Check for expectations where `be` is used without argument.\n\nThe `be` matcher is too generic, as it pass on everything that is not nil or false. If that is the exact intend, use `be_truthy`. In all other cases it's better to specify what exactly is the expected value."
        },
        "RSpec/BeEql": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Check for expectations where `+be(...)+` can replace `+eql(...)+`.\n\nThe `be` matcher compares by identity while the `eql` matcher compares using `eql?`. Integers, floats, booleans, symbols, and nil can be compared by identity and therefore the `be` matcher is preferable as it is a more strict test.\n\nThis cop only looks for instances of `+expect(...).to eql(...)+`. We do not check `to_not` or `not_to` since `!eql?` is more strict than `!equal?`. We also do not try to flag `eq` because if `a == b`, and `b` is comparable by identity, `a` is still not necessarily the same type as `b` since the `#==` operator can coerce objects for comparison."
        },
        "RSpec/ContextMethod": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/ContextWording": {
          "description": "Checks that `context` docstring starts with an allowed prefix.\n\nThe default list of prefixes is minimal. Users are encouraged to tailor the configuration to meet project needs. Other acceptable prefixes may include `if`, `unless`, `for`, `before`, `after`, or `during`."
        },
        "RSpec/DescribedClass": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "described_class",
                "explicit"
              ]
            },
            "SafeAutoCorrect": {
              "type": "boolean",
              "description": "Default: false"
            }
          },
          "description": "Checks that tests use `described_class`.\n\nIf the first argument of describe is a class, the class is exposed to each example via described_class.\n\nThis cop can be configured using the `EnforcedStyle` and `SkipBlocks` options.\n\nThere's a known caveat with rspec-rails's `controller` helper that runs its block in a different context, and `described_class` is not available to it. `SkipBlocks` option excludes detection in all non-RSpec related blocks.\n\nTo narrow down this setting to only a specific directory, it is possible to use an overriding configuration file local to that directory."
        },
        "RSpec/Dialect": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "This cop enforces custom RSpec dialects.\n\nA dialect can be based on the following RSpec methods:\n\n - describe, context, feature, example_group\n\n - xdescribe, xcontext, xfeature\n\n - fdescribe, fcontext, ffeature\n\n - shared_examples, shared_examples_for, shared_context\n\n - it, specify, example, scenario, its\n\n - fit, fspecify, fexample, fscenario, focus\n\n - xit, xspecify, xexample, xscenario, skip\n\n - pending\n\n - prepend_before, before, append_before,\n\n - around\n\n - prepend_after, after, append_after\n\n - let, let!\n\n - subject, subject!\n\n - expect, is_expected, expect_any_instance_of\n\nBy default all of the RSpec methods and aliases are allowed. By setting a config like:\n\nRSpec/Dialect:     PreferredMethods:       context: describe\n\nYou can expect the following behavior:"
        },
        "RSpec/EmptyExampleGroup": {
          "properties": {
            "CustomIncludeMethods": {
              "description": "Default: []"
            }
          },
          "description": "Checks if an example group does not include any tests.\n\nThis cop is configurable using the `CustomIncludeMethods` option"
        },
        "RSpec/EmptyHook": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "VersionAdded": {
              "type": "string",
              "description": "Default: 1.39.0"
            }
          }
        },
        "RSpec/EmptyLineAfterExample": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/EmptyLineAfterExampleGroup": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/EmptyLineAfterFinalLet": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/EmptyLineAfterHook": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/EmptyLineAfterSubject": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/ExampleLength": {
          "description": "Checks for long examples.\n\nA long example is usually more difficult to understand. Consider extracting out some behaviour, e.g. with a `let` block, or a helper method."
        },
        "RSpec/ExampleWithoutDescription": {
          "properties": {
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "always_allow",
                "single_line_only",
                "disallow"
              ]
            }
          },
          "description": "Checks for examples without a description.\n\nRSpec allows for auto-generated example descriptions when there is no description provided or the description is an empty one.\n\nThis cop removes empty descriptions. It also defines whether auto-generated description is allowed, based on the configured style.\n\nThis cop can be configured using the `EnforcedStyle` option"
        },
        "RSpec/ExampleWording": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "IgnoredWords": {
              "description": "Default: []"
            }
          },
          "description": "Checks for common mistakes in example descriptions.\n\nThis cop will correct docstrings that begin with 'should' and 'it'.\n\nThe autocorrect is experimental - use with care! It can be configured with CustomTransform (e.g. have \\=> has) and IgnoredWords (e.g. only)."
        },
        "RSpec/ExpectActual": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Checks for `+expect(...)+` calls containing literal values."
        },
        "RSpec/ExpectChange": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "method_call",
                "block"
              ]
            }
          },
          "description": "Checks for consistent style of change matcher.\n\nEnforces either passing object and attribute as arguments to the matcher or passing a block that reads the attribute value.\n\nThis cop can be configured using the `EnforcedStyle` option."
        },
        "RSpec/ExpectOutput": {
          "description": "Checks for opportunities to use `+expect { ... }.to output+`."
        },
        "RSpec/FilePath": {
          "properties": {
            "SpecSuffixOnly": {
              "type": "boolean",
              "description": "Default: false"
            }
          },
          "description": "Checks that spec file paths are consistent and well-formed.\n\nBy default, this checks that spec file paths are consistent with the test subject and and enforces that it reflects the described class/module and its optionally called out method.\n\nWith the configuration option `IgnoreMethods` the called out method will be ignored when determining the enforced path.\n\nWith the configuration option `CustomTransform` modules or classes can be specified that should not as usual be transformed from CamelCase to snake_case (e.g. 'RuboCop' \\=> 'rubocop' ).\n\nWith the configuration option `SpecSuffixOnly` test files will only be checked to ensure they end in '_spec.rb'. This option disables checking for consistency in the test subject or test methods."
        },
        "RSpec/HookArgument": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "implicit",
                "each",
                "example"
              ]
            }
          },
          "description": "Checks the arguments passed to `before`, `around`, and `after`.\n\nThis cop checks for consistent style when specifying RSpec hooks which run for each example. There are three supported styles: \"implicit\", \"each\", and \"example.\" All styles have the same behavior."
        },
        "RSpec/HooksBeforeExamples": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/ImplicitBlockExpectation": {
          "description": "Check that implicit block expectation syntax is not used.\n\nPrefer using explicit block expectations."
        },
        "RSpec/ImplicitExpect": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "is_expected",
                "should"
              ]
            }
          },
          "description": "Check that a consistent implicit expectation style is used.\n\nThis cop can be configured using the `EnforcedStyle` option and supports the `--auto-gen-config` flag."
        },
        "RSpec/ImplicitSubject": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "single_line_only",
                "single_statement_only",
                "disallow"
              ]
            }
          },
          "description": "Checks for usage of implicit subject (`is_expected` / `should`).\n\nThis cop can be configured using the `EnforcedStyle` option"
        },
        "RSpec/InstanceSpy": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/InstanceVariable": {
          "description": "Checks for instance variable usage in specs.\n\nThis cop can be configured with the option `AssignmentOnly` which will configure the cop to only register offenses on instance variable usage if the instance variable is also assigned within the spec"
        },
        "RSpec/InvalidPredicateMatcher": {
          "description": "Checks invalid usage for predicate matcher.\n\nPredicate matcher does not need a question. This cop checks an unnecessary question in predicate matcher."
        },
        "RSpec/ItBehavesLike": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "it_behaves_like",
                "it_should_behave_like"
              ]
            }
          }
        },
        "RSpec/LeadingSubject": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/LeakyConstantDeclaration": {
          "description": "Checks that no class, module, or constant is declared.\n\nConstants, including classes and modules, when declared in a block scope, are defined in global namespace, and leak between examples.\n\nIf several examples may define a `DummyClass`, instead of being a blank slate class as it will be in the first example, subsequent examples will be reopening it and modifying its behaviour in unpredictable ways. Even worse when a class that exists in the codebase is reopened.\n\nAnonymous classes are fine, since they don't result in global namespace name clashes."
        },
        "RSpec/LetBeforeExamples": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/MessageExpectation": {
          "properties": {
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "allow",
                "expect"
              ]
            }
          },
          "description": "Checks for consistent message expectation style.\n\nThis cop can be configured in your configuration using the `EnforcedStyle` option and supports `--auto-gen-config`."
        },
        "RSpec/MessageSpies": {
          "properties": {
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "have_received",
                "receive"
              ]
            }
          },
          "description": "Checks that message expectations are set using spies.\n\nThis cop can be configured in your configuration using the `EnforcedStyle` option and supports `--auto-gen-config`."
        },
        "RSpec/MultipleDescribes": {
          "description": "Checks for multiple top level describes.\n\nMultiple descriptions for the same class or module should either be nested or separated into different test files."
        },
        "RSpec/MultipleExpectations": {
          "description": "Checks if examples contain too many `expect` calls.\n\nThis cop is configurable using the `Max` option and works with `--auto-gen-config`."
        },
        "RSpec/MultipleSubjects": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Checks if an example group defines `subject` multiple times.\n\nThe autocorrect behavior for this cop depends on the type of duplication:\n\n - If multiple named subjects are defined then this probably indicates that the overwritten subjects (all subjects except the last definition) are effectively being used to define helpers. In this case they are replaced with let.\n\n - If multiple unnamed subjects are defined though then this can only be dead code and we remove the overwritten subject definitions.\n\n - If subjects are defined with subject! then we don’t autocorrect. This is enough of an edge case that people can just move this to a before hook on their own"
        },
        "RSpec/NamedSubject": {
          "description": "Checks for explicitly referenced test subjects.\n\nRSpec lets you declare an \"implicit subject\" using `+subject { ... }+` which allows for tests like `it { is_expected.to be_valid }`. If you need to reference your test subject you should explicitly name it using `+subject(:your_subject_name) { ... }+`. Your test subjects should be the most important object in your tests so they deserve a descriptive name.\n\nThis cop can be configured in your configuration using the `IgnoreSharedExamples` which will not report offenses for implicit subjects in shared example groups."
        },
        "RSpec/NestedGroups": {
          "description": "Checks for nested example groups.\n\nThis cop is configurable using the `Max` option and supports `--auto-gen-config"
        },
        "RSpec/NotToNot": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "not_to",
                "to_not"
              ]
            }
          }
        },
        "RSpec/PredicateMatcher": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "inflected",
                "explicit"
              ]
            },
            "AllowedExplicitMatchers": {
              "description": "Default: []"
            },
            "SafeAutoCorrect": {
              "type": "boolean",
              "description": "Default: false"
            }
          },
          "description": "Prefer using predicate matcher over using predicate method directly.\n\nRSpec defines magic matchers for predicate methods. This cop recommends to use the predicate matcher instead of using predicate method directly."
        },
        "RSpec/ReceiveCounts": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/ReceiveNever": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Prefer `+not_to receive(...)+` over `+receive(...).never+`."
        },
        "RSpec/ReturnFromStub": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "and_return",
                "block"
              ]
            }
          },
          "description": "Checks for consistent style of stub's return setting.\n\nEnforces either `and_return` or block-style return in the cases where the returned value is constant. Ignores dynamic returned values are the result would be different\n\nThis cop can be configured using the `EnforcedStyle` option"
        },
        "RSpec/ScatteredLet": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "VersionChanged": {
              "type": "string",
              "description": "Default: 1.39"
            }
          },
          "description": "Checks for let scattered across the example group.\n\nGroup lets together"
        },
        "RSpec/ScatteredSetup": {
          "description": "Checks for setup scattered across multiple hooks in an example group.\n\nUnify `before`, `after`, and `around` hooks when possible."
        },
        "RSpec/SharedContext": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Checks for proper shared_context and shared_examples usage.\n\nIf there are no examples defined, use shared_context. If there is no setup defined, use shared_examples."
        },
        "RSpec/SharedExamples": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/SingleArgumentMessageChain": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "RSpec/UnspecifiedException": {
          "description": "Checks for a specified error in checking raised errors.\n\nEnforces one of an Exception type, a string, or a regular expression to match against the exception message as a parameter to `raise_error`"
        },
        "RSpec/VariableDefinition": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "enum": [
                "symbols",
                "strings"
              ],
              "description": "Default: symbols"
            },
            "VersionAdded": {
              "type": "string",
              "description": "Default: 1.40"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: symbols, strings"
            }
          },
          "description": "Checks that memoized helpers names are symbols or strings."
        },
        "RSpec/VariableName": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "EnforcedStyle": {
              "enum": [
                "snake_case",
                "camelCase"
              ],
              "description": "Default: snake_case"
            },
            "VersionAdded": {
              "type": "string",
              "description": "Default: 1.40"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: snake_case, camelCase"
            }
          },
          "description": "Checks that memoized helper names use the configured style."
        },
        "RSpec/Yield": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        },
        "Rails": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'Rails' department (rspec extension)"
        },
        "Rails/HttpStatus": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "type": null,
              "enum": [
                "numeric",
                "symbolic"
              ]
            }
          }
        }
      }
    }
  },
  {
    "version": "1.41.0",
    "diff": {
    }
  },
  {
    "version": "1.42.0",
    "diff": {
    }
  },
  {
    "version": "1.43.0",
    "diff": {
      "properties": {
        "RSpec/VariableName": {
          "properties": {
            "IgnoredPatterns": {
              "type": "array",
              "description": "Default: "
            }
          }
        },
        "RSpec/MultipleMemoizedHelpers": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AllowSubject": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Max": {
              "type": "integer",
              "description": "Default: 5"
            }
          },
          "description": "Checks if example groups contain too many `let` and `subject` calls."
        }
      }
    }
  },
  {
    "version": "1.43.1",
    "diff": {
    }
  },
  {
    "version": "1.43.2",
    "diff": {
    }
  },
  {
    "version": "1.44.0",
    "diff": {
      "properties": {
        "Capybara/VisibilityMatcher": {
          "properties": {
            "VersionAdded": null
          }
        },
        "RSpec/BeEql": {
          "description": "Check for expectations where `be(...)` can replace `eql(...)`.\n\nThe `be` matcher compares by identity while the `eql` matcher compares using `eql?`. Integers, floats, booleans, symbols, and nil can be compared by identity and therefore the `be` matcher is preferable as it is a more strict test.\n\nThis cop only looks for instances of `expect(...).to eql(...)`. We do not check `to_not` or `not_to` since `!eql?` is more strict than `!equal?`. We also do not try to flag `eq` because if `a == b`, and `b` is comparable by identity, `a` is still not necessarily the same type as `b` since the `#==` operator can coerce objects for comparison."
        },
        "RSpec/BeforeAfterAll": {
          "properties": {
            "Exclude": {
              "description": "Default: spec/spec_helper.rb, spec/rails_helper.rb, spec/support/*/.rb"
            }
          }
        },
        "RSpec/DescribeClass": {
          "properties": {
            "IgnoredMetadata": {
              "description": "Default: {\"type\"⇒[\"channel\", \"controller\", \"helper\", \"job\", \"mailer\", \"model\", \"request\", \"routing\", \"view\", \"feature\", \"system\", \"mailbox\", \"aruba\"]}"
            }
          },
          "description": "Check that the first argument to the top-level describe is a constant.\n\nIt can be configured to ignore strings when certain metadata is passed.\n\nIgnores Rails and Aruba `type` metadata by default."
        },
        "RSpec/DescribedClass": {
          "properties": {
            "AutoCorrect": null
          }
        },
        "RSpec/Dialect": {
          "description": "This cop enforces custom RSpec dialects.\n\nA dialect can be based on the following RSpec methods:\n\n - describe, context, feature, example_group\n\n - xdescribe, xcontext, xfeature\n\n - fdescribe, fcontext, ffeature\n\n - shared_examples, shared_examples_for, shared_context\n\n - it, specify, example, scenario, its\n\n - fit, fspecify, fexample, fscenario, focus\n\n - xit, xspecify, xexample, xscenario, skip\n\n - pending\n\n - prepend_before, before, append_before,\n\n - around\n\n - prepend_after, after, append_after\n\n - let, let!\n\n - subject, subject!\n\n - expect, is_expected, expect_any_instance_of\n\nBy default all of the RSpec methods and aliases are allowed. By setting a config like:\n\n  RSpec/Dialect:\n    PreferredMethods:\n      context: describe\n\nYou can expect the following behavior:"
        },
        "RSpec/EmptyHook": {
          "properties": {
            "VersionAdded": null
          }
        },
        "RSpec/ExampleWording": {
          "properties": {
            "CustomTransform": {
              "description": "Default: {\"be\"⇒\"is\", \"BE\"⇒\"IS\", \"have\"⇒\"has\", \"HAVE\"⇒\"HAS\"}"
            }
          },
          "description": "Checks for common mistakes in example descriptions.\n\nThis cop will correct docstrings that begin with 'should' and 'it'.\n\nThe autocorrect is experimental - use with care! It can be configured with CustomTransform (e.g. have => has) and IgnoredWords (e.g. only)."
        },
        "RSpec/ExpectActual": {
          "properties": {
            "Exclude": {
              "description": "Default: spec/routing/*/"
            }
          },
          "description": "Checks for `expect(...)` calls containing literal values."
        },
        "RSpec/ExpectOutput": {
          "description": "Checks for opportunities to use `expect { ... }.to output`."
        },
        "RSpec/FilePath": {
          "properties": {
            "CustomTransform": {
              "description": "Default: {\"RuboCop\"⇒\"rubocop\", \"RSpec\"⇒\"rspec\"}"
            }
          },
          "description": "Checks that spec file paths are consistent and well-formed.\n\nBy default, this checks that spec file paths are consistent with the test subject and and enforces that it reflects the described class/module and its optionally called out method.\n\nWith the configuration option `IgnoreMethods` the called out method will be ignored when determining the enforced path.\n\nWith the configuration option `CustomTransform` modules or classes can be specified that should not as usual be transformed from CamelCase to snake_case (e.g. 'RuboCop' => 'rubocop' ).\n\nWith the configuration option `SpecSuffixOnly` test files will only be checked to ensure they end in '_spec.rb'. This option disables checking for consistency in the test subject or test methods."
        },
        "RSpec/MultipleDescribes": {
          "description": "Checks for multiple top-level example groups.\n\nMultiple descriptions for the same class or module should either be nested or separated into different test files."
        },
        "RSpec/MultipleMemoizedHelpers": {
          "description": "Checks if example groups contain too many `let` and `subject` calls.\n\nThis cop is configurable using the `Max` option and the `AllowSubject` which will configure the cop to only register offenses on calls to `let` and not calls to `subject`."
        },
        "RSpec/NamedSubject": {
          "description": "Checks for explicitly referenced test subjects.\n\nRSpec lets you declare an \"implicit subject\" using `subject { ... }` which allows for tests like `it { is_expected.to be_valid }`. If you need to reference your test subject you should explicitly name it using `subject(:your_subject_name) { ... }`. Your test subjects should be the most important object in your tests so they deserve a descriptive name.\n\nThis cop can be configured in your configuration using the `IgnoreSharedExamples` which will not report offenses for implicit subjects in shared example groups."
        },
        "RSpec/PredicateMatcher": {
          "properties": {
            "AutoCorrect": null
          }
        },
        "RSpec/ReceiveNever": {
          "description": "Prefer `not_to receive(...)` over `receive(...).never`."
        },
        "RSpec/RepeatedIncludeExample": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Check for repeated include of shared examples."
        },
        "RSpec/ScatteredLet": {
          "properties": {
            "VersionChanged": null
          }
        },
        "RSpec/StubbedMock": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: pending"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks that message expectations do not have a configured response."
        },
        "RSpec/VariableDefinition": {
          "properties": {
            "VersionAdded": null
          }
        },
        "RSpec/VariableName": {
          "properties": {
            "VersionAdded": null,
            "IgnoredPatterns": {
              "description": "Default: []"
            }
          },
          "description": "Checks that memoized helper names use the configured style.\n\nVariables can be excluded from checking using the `IgnoredPatterns` option."
        }
      }
    }
  },
  {
    "version": "1.44.1",
    "diff": {
    }
  },
  {
    "version": "2.0.0.pre",
    "diff": {
      "properties": {
        "Capybara": null,
        "Capybara/CurrentPathExpectation": null,
        "Capybara/FeatureMethods": null,
        "Capybara/VisibilityMatcher": null,
        "FactoryBot": null,
        "FactoryBot/AttributeDefinedStatically": null,
        "FactoryBot/CreateList": null,
        "FactoryBot/FactoryClassName": null,
        "Rails": null,
        "Rails/HttpStatus": null,
        "RSpec/Capybara": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'RSpec/Capybara' department (rspec extension)"
        },
        "RSpec/Capybara/CurrentPathExpectation": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Checks that no expectations are set on Capybara's `current_path`.\n\nThe `have_current_path` matcher (https://www.rubydoc.info/github/ teamcapybara/capybara/master/Capybara/RSpecMatchers#have_current_path- instance_method) should be used on `page` to set expectations on Capybara's current path, since it uses Capybara's waiting functionality (https://github.com/teamcapybara/capybara/blob/master/ README.md#asynchronous-javascript-ajax-and-friends) which ensures that preceding actions (like `click_link`) have completed."
        },
        "RSpec/Capybara/FeatureMethods": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnabledMethods": {
              "type": "array",
              "description": "Default: []"
            }
          },
          "description": "Checks for consistent method usage in feature specs.\n\nBy default, the cop disables all Capybara-specific methods that have the same native RSpec method (e.g. are just aliases). Some teams however may prefer using some of the Capybara methods (like `feature`) to make it obvious that the test uses Capybara, while still disable the rest of the methods, like `given` (alias for `let`), `background` (alias for `before`), etc. You can configure which of the methods to be enabled by using the EnabledMethods configuration option."
        },
        "RSpec/Capybara/VisibilityMatcher": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for boolean visibility in capybara finders.\n\nCapybara lets you find elements that match a certain visibility using the `:visible` option. `:visible` accepts both boolean and symbols as values, however using booleans can have unwanted effects. `visible: false` does not find just invisible elements, but both visible and invisible elements. For expressiveness and clarity, use one of the symbol values, `:all`, `:hidden` or `:visible`. (https://www.rubydoc.info/gems/capybara/Capybara%2FNode%2FFinders:all)"
        },
        "RSpec/FactoryBot": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'RSpec/FactoryBot' department (rspec extension)"
        },
        "RSpec/FactoryBot/AttributeDefinedStatically": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Always declare attribute values as blocks."
        },
        "RSpec/FactoryBot/CreateList": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "enum": [
                "create_list",
                "n_times"
              ],
              "description": "Default: create_list"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: create_list, n_times"
            }
          },
          "description": "Checks for create_list usage.\n\nThis cop can be configured using the `EnforcedStyle` option"
        },
        "RSpec/FactoryBot/FactoryClassName": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Use string value when setting the class attribute explicitly.\n\nThis cop would promote faster tests by lazy-loading of application files. Also, this could help you suppress potential bugs in combination with external libraries by avoiding a preload of application files from the factory files."
        },
        "RSpec/Rails": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "'RSpec/Rails' department (rspec extension)"
        },
        "RSpec/Rails/HttpStatus": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: true"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "enum": [
                "numeric",
                "symbolic"
              ],
              "description": "Default: symbolic"
            },
            "SupportedStyles": {
              "type": "array",
              "description": "Default: numeric, symbolic"
            }
          },
          "description": "Enforces use of symbolic or numeric value to describe HTTP status."
        }
      }
    }
  },
  {
    "version": "2.0.0",
    "diff": {
      "properties": {
        "RSpec/InvalidPredicateMatcher": null,
        "RSpec": {
          "properties": {
            "Include": {
              "description": "Default: **/*_spec.rb, **/spec/**/*"
            },
            "Language": {
              "description": "Default: {\"ExampleGroups\"=>{\"Regular\"=>[\"describe\", \"context\", \"feature\", \"example_group\"], \"Skipped\"=>[\"xdescribe\", \"xcontext\", \"xfeature\"], \"Focused\"=>[\"fdescribe\", \"fcontext\", \"ffeature\"]}, \"Examples\"=>{\"Regular\"=>[\"it\", \"specify\", \"example\", \"scenario\", \"its\"], \"Focused\"=>[\"fit\", \"fspecify\", \"fexample\", \"fscenario\", \"focus\"], \"Skipped\"=>[\"xit\", \"xspecify\", \"xexample\", \"xscenario\", \"skip\"], \"Pending\"=>[\"pending\"]}, \"Expectations\"=>[\"expect\", \"is_expected\", \"expect_any_instance_of\"], \"Helpers\"=>[\"let\", \"let!\"], \"Hooks\"=>[\"prepend_before\", \"before\", \"append_before\", \"around\", \"prepend_after\", \"after\", \"append_after\"], \"HookScopes\"=>[\"each\", \"example\", \"context\", \"all\", \"suite\"], \"Includes\"=>{\"Examples\"=>[\"it_behaves_like\", \"it_should_behave_like\", \"include_examples\"], \"Context\"=>[\"include_context\"]}, \"Runners\"=>[\"to\", \"to_not\", \"not_to\"], \"SharedGroups\"=>{\"Examples\"=>[\"shared_examples\", \"shared_examples_for\"], \"Context\"=>[\"shared_context\"]}, \"Subjects\"=>[\"subject\", \"subject!\"]}"
            }
          }
        },
        "RSpec/EmptyExampleGroup": {
          "properties": {
            "CustomIncludeMethods": null
          },
          "description": "Checks if an example group does not include any tests."
        },
        "RSpec/FilePath": {
          "properties": {
            "Include": {
              "description": "Default: **/*_spec*rb*, **/spec/**/*"
            }
          }
        },
        "RSpec/StubbedMock": {
          "properties": {
            "Enabled": {
              "description": "Default: true"
            }
          }
        },
        "RSpec/FactoryBot/AttributeDefinedStatically": {
          "properties": {
            "Include": {
              "description": "Default: spec/factories.rb, spec/factories//.rb, features/support/factories//.rb"
            }
          }
        },
        "RSpec/FactoryBot/CreateList": {
          "properties": {
            "Include": {
              "description": "Default: **/*_spec.rb, **/spec/**/*, spec/factories.rb, spec/factories//.rb, features/support/factories//.rb"
            }
          }
        },
        "RSpec/FactoryBot/FactoryClassName": {
          "properties": {
            "Include": {
              "description": "Default: spec/factories.rb, spec/factories//.rb, features/support/factories//.rb"
            }
          }
        }
      }
    }
  },
  {
    "version": "2.0.1",
    "diff": {
    }
  },
  {
    "version": "2.1.0",
    "diff": {
      "properties": {
        "RSpec/Focus": {
          "properties": {
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      }
    }
  },
  {
    "version": "2.2.0",
    "diff": {
      "properties": {
        "RSpec": {
          "properties": {
            "Enabled": {
              "description": "Default: true"
            }
          }
        }
      }
    }
  },
  {
    "version": "2.3.0",
    "diff": {
      "properties": {
        "RSpec/ContextWording": {
          "description": "Checks that `context` docstring starts with an allowed prefix.\n\nThe default list of prefixes is minimal. Users are encouraged to tailor the configuration to meet project needs. Other acceptable prefixes may include `if`, `unless`, `for`, `before`, `after`, or `during`. They may consist of multiple words if desired."
        },
        "RSpec/ExampleLength": {
          "properties": {
            "CountAsOne": {
              "type": "array",
              "description": "Default: []"
            }
          },
          "description": "Checks for long examples.\n\nA long example is usually more difficult to understand. Consider extracting out some behaviour, e.g. with a `let` block, or a helper method.\n\nYou can set literals you want to fold with `CountAsOne`. Available are: 'array', 'hash', and 'heredoc'. Each literal will be counted as one line regardless of its actual size."
        }
      }
    }
  },
  {
    "version": "2.4.0",
    "diff": {
      "properties": {
        "RSpec/IdenticalEqualityAssertion": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: pending"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          },
          "description": "Checks for equality assertions with identical expressions on both sides."
        },
        "RSpec/Rails/AvoidSetupHook": {
          "type": "object",
          "additionalProperties": true,
          "propertyNames": {
            "$ref": "#/definitions/attributeName"
          },
          "properties": {
            "Enabled": {
              "type": "boolean",
              "description": "Default: pending"
            },
            "Exclude": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Include": {
              "$ref": "#/definitions/listOfFiles"
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuideBaseURL": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          },
          "description": "Checks that tests use RSpec `before` hook over Rails `setup` method."
        }
      }
    }
  }
]